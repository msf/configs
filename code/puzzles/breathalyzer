#!/usr/bin/env python

import sys
from time import time

good_words_list = 'twl06.txt'
good_words_list = '/var/tmp/twl06.txt'

alphabet = 'abcdefghijklmnopqrstuvwxyz'.upper()

def edits1(word):
    n = len(word)
    return set([word[0:i]+word[i+1:] for i in range(n)] + # deletion
# trans not counted.  [word[0:i]+word[i+1]+word[i]+word[i+2:] for i in range(n-1)] + # transposition
               [word[0:i]+c+word[i+1:] for i in range(n) for c in alphabet] + # substitution
               [word[0:i]+c+word[i:] for i in range(n+1) for c in alphabet]) # insertion

def lev_dist( w1, w2, max_cost ):
    len1 = len(w1) +1
    len2 = len(w2) +1
    d = [ [0]*len2 for i in xrange(len1) ]
    i = 0
    j = 0
    cost = 0
    for i in xrange( len1 ):
        d[i][0] = i
    for j in xrange( len2 ):
        d[0][j] = j
    for i in xrange(1, len1 ):
        for j in xrange(1, len2 ):
            if w1[i-1] == w2[j-1]:
                cost = d[i-1][j-1]
            else:
                deletion     = d[i-1][j] +1
                insertion    = d[i][j-1] +1
                substitution = d[i-1][j-1] + 1
                cost = min(deletion, insertion, substitution)
            if i == j and cost > max_cost:
                return cost
            d[i][j] = cost
    return d[len1-1][len2-1]




def damlev_dist( word1, word2, max_cost ):
    """ Damerau-Levenshtein Distance is a "distance" (string metric) between two strings,
    i.e., finite sequence of symbols, given by counting the minimum number of operations
    needed to transform one string into the other, where an operation is defined as an
    insertion, deletion, or substitution of a single character, or a transposition of two characters.
    -- NOTE: this isn't correct because for exercise purposes transposion is counted has 2 substitutions.
    """

    len1 = len(word1) +1
    len2 = len(word2) +1
    d = [ [0]*len2 for i in xrange(len1) ]
    i = 0
    j = 0
    cost = 0
    for i in xrange( len1 ):
        d[i][0] = i
    for j in xrange( len2 ):
        d[0][j] = j
    for i in xrange(1, len1 ):
        for j in xrange(1, len2 ):
            if word1[i-1] == word2[j-1]:
                cost = 0
            else:
                cost = 1
            deletion     = d[i-1][j] +1
            insertion    = d[i][j-1] +1
            substitution = d[i-1][j-1] + cost
#            transposition= d[i-2][j-2] + cost
            cost = min(deletion, insertion, substitution)
#            if i > 0 and j > 0 and word1[i] == word2[j-1] and word[i-1] == word2[j]:
#                 d[i][j] = min( d[i][j], transposition )
            # speed hack
            if i == j and cost > max_cost:
                return cost
            d[i][j] = cost
    return d[len1-1][len2-1]

def match_dist(word, wedits, good_words, cache, dist):
    # distance of dist from a good word ?
    for edit in wedits:
        if edit in good_words:
            cache[word] = dist
            return True
    return False


def breathalizer(good_words, words, word_edits, edits2):
    total_score = 0
    cache = {}
    for w in words:
        stop_word = False

        # good word
        if w in good_words:
            continue

        # repeated word
        if w in cache:
            total_score += cache[w]
            continue

        if match_dist(w, word_edits[w], good_words, cache, 1):
            total_score += cache[w]
            continue

        if match_dist(w, edits2[w], good_words, cache, 2):
            total_score += cache[w]
            continue

        # minimum damerau-levenshtein distance from list of good words
        best = len(w)
        for gw in good_words.keys():
            best = min(lev_dist(w, gw, best), best)
            if best == 3:
                break
        cache[w] = best
        total_score += best

    return total_score

def print_times(times):
    l = len(times)
    i = 2
    while( i <= l):
        print("step %r: %f secs"% ( i-1, times[i] - times[i-1]) )
        i += 1
    total = times[l] - times[1]
    print("total: %f secs" % ( total ))

def create_edits_of_words(words):
    word_edits = {}
    for w in words:
        word_edits.setdefault(w, edits1(w))
    word_edits2 = {}
    for w, edits in word_edits.iteritems():
        dist2  = []
        [ dist2.extend(edits1(wrd)) for wrd in edits ]
        word_edits2[w] = dist2
    return (word_edits, word_edits2)


times = {}

file = open(sys.argv[1],"r")

times[1] = time()
words = [ w for w in file.read().strip().upper().split() ]
times[2] = time()
word_edits, word_edits2 = create_edits_of_words(words)
times[3] = time()

good_file = open(good_words_list, "r")
good_words = {}
for w in good_file.read().split():
    good_words[w] = 1
times[4] = time()

print(breathalizer(good_words, words, word_edits, word_edits2))
times[5] = time()


#print_times(times)
